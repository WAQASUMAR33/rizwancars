generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums for status fields
enum DistributorStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum VehicleStatus {
  Pending
  Transport
  Inspection
  Shipped
  Destination
  Delievered
  Sold
}

enum InvoiceStatus {
  PAID
  UNPAID
}

model Admin {
  id         Int      @id @default(autoincrement())
  role       String   @db.VarChar(255)
  username   String   @db.VarChar(255) @unique
  password   String   @db.VarChar(255) // Hash in app logic
  fullname   String   @db.VarChar(255)
  balance    Float    @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ContainerBooking {
  id                            Int      @id @default(autoincrement())
  actualShipper                 String
  cyOpen                        String
  bookingNo                     String   @unique
  etd                           DateTime
  cyCutOff                      DateTime
  eta                           DateTime
  volume                        String
  carrier                       String
  vessel                        String
  portOfLoading                 String
  portOfDischarge               String
  cargoMode                     String
  placeOfIssue                  String
  freightTerm                   String
  shipperName                   String
  consignee                     String
  descriptionOfGoods            String   @db.Text    @default("")
  containerQuantity             Int
  numbers                       String
  imagePath                     String   @db.Text   @default("")
  added_by                      Int    @default(0)
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  containerDetails              ContainerDetail[] // Relation
}

model ContainerDetail {
  id               Int      @id @default(autoincrement())
  consigneeName    String
  notifyParty      String
  shipperPer       String
  from             String
  to               String
  bookingNo        String
  note             String   @db.Text
  imagePath        String   @db.Text   @default("")
  added_by         Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  containerBooking ContainerBooking? @relation(fields: [bookingNo], references: [bookingNo])
}


model ContainerItemDetail {
  id           Int      @id @default(autoincrement())
  itemNo       String
  chassisNo    String
  year         String
  color        String
  cc           String
  amount       Decimal
  vehicleId    Int      // Add this as the foreign key
  vehicle      AddVehicle @relation(fields: [vehicleId], references: [id]) // Define the relation
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
model AddVehicle {
  id                   Int      @id @default(autoincrement())
  invoiceNo            String
  chassisNo            String
  maker                String
  year                 String
  color                String
  engineType           String
  tenPercentAdd        Float    @default(0)
  recycleAmount        Float    @default(0)
  auction_house        String   @default("")
  bidAmount            Float    @default(0)
  commissionAmount     Float    @default(0)
  numberPlateTax       Float    @default(0)
  repairCharges        Float    @default(0)
  totalAmount_yen      Float    @default(0)
  totalAmount_dollers  Float    @default(0)
  sendingPort          Int?     // Corrected from sandingPort
  seaPort              SeaPort? @relation("SeaPortVehicles", fields: [sendingPort], references: [id])
  additionalAmount     Float    @default(0)
  isDocumentRequired   String
  documentReceiveDate  DateTime?
  isOwnership          String
  ownershipDate        DateTime?
  status               VehicleStatus @default(Pending)
  distributor_id       Int      @default(1)
  vehicleImages        VehicleImage[]
  added_by             Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  containerItems       ContainerItemDetail[]
  distributor          Distributor @relation("DistributorVehicles", fields: [distributor_id], references: [id])
}


model VehicleImage {
  id           Int      @id @default(autoincrement())
  addVehicleId Int
  imagePath    String   @db.Text
  addVehicle   AddVehicle @relation(fields: [addVehicleId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model Invoice {
  id              Int      @id @default(autoincrement())
  date            DateTime
  number          Int      @unique   
  status          InvoiceStatus @default(UNPAID)
  auctionHouse    String
  imagePath       String   @db.Text @default("")
  amountYen       Float  @default(0)
  amount_doller   Float @default(0)
  added_by        Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Transport {
  id            Int      @id @default(autoincrement())
  date          DateTime
  deliveryDate  DateTime
  port          String
  company       String
  fee           Float @default(0)
  fee_doller    Float @default(0)
  imagePath     String   @db.Text @default("")
  vehicleNo     String
  added_by      Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Inspection {
  id            Int      @id @default(autoincrement())
  vehicleNo     String
  company       String
  date          DateTime
  amount        Float  @default(0)
  amount_doller Float  @default(0)
  imagePath     String  @db.Text @default("")
  added_by      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// SeaPort Model
model SeaPort {
  id          Int      @id @default(autoincrement())
  name        String          @default("")
  location    String?         @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  vehicles    AddVehicle[] @relation("SeaPortVehicles") // Opposite relation field
}

model Distributor {
  id         Int              @id @default(autoincrement())
  name       String
  location   String
  username   String           @unique
  password   String           // Hash in app logic
  balance    Float            @default(0)
  status     DistributorStatus @default(ACTIVE)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  vehicles   AddVehicle[]     @relation("DistributorVehicles") // Opposite relation field
  ledgers    Ledger[]         @relation("DistributorLedger")   // New relation to Ledger
}

model Ledger {
  id             Int      @id @default(autoincrement()) // Primary key with auto-increment
  distributorId  Int      // Foreign key to the Distributor table (renamed from userId)
  debit          Float    @default(0.0) // Amount debited
  credit         Float    @default(0.0) // Amount credited
  balance        Float    @default(0.0) // Current balance
  description    String?  @db.VarChar(255) // Description of the transaction
  transaction_at DateTime @default(now())
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  Distributor    Distributor @relation("DistributorLedger", fields: [distributorId], references: [id], onDelete: Cascade)

  @@index([distributorId])
}
model VehicleConsignment {
  id             Int      @id @default(autoincrement())
  containerId    Int
  sealNo         String
  invoiceTo      String
  shipper        String
  date           DateTime
  refNo          String
  equipNo        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model CustomerInformation {
  id           Int      @id @default(autoincrement())
  customerNo   String   // Changed from Int for flexibility
  mobileNo     String   // Changed from Int for phone numbers
  passportNo   String   // Changed from Int for alphanumeric support
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SaleVehicleInformation {
  id            Int      @id @default(autoincrement())
  commission    Decimal
  repairCost    Decimal
  price         Decimal
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @db.VarChar(255) @unique
  password   String   @db.VarChar(255) // Hash in app logic
  fullname   String   @db.VarChar(255)
  token      String   @db.VarChar(255)
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @updatedAt @db.Timestamp(0)
  role       String   @db.VarChar(255)
  status     String   @default("Active") @db.VarChar(255)
  terminal   Int
}



model RizwanCars {
  id         Int      @id @default(autoincrement())
  balance    Float   @default(0)
  title   String 
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @updatedAt @db.Timestamp(0)
}



model Expenses {
  id         Int      @id @default(autoincrement())
  user_id   Int 
  expense_title   String 
  expense_description    String     @db.Text @default("")
  amount    Float    @default(0)
  added_by     Int
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @updatedAt @db.Timestamp(0)
}


model BankAccounts {
  id            Int      @id @default(autoincrement()) // Auto-incrementing primary key
  bank_title    String // Title of the bank
  account_title String // Title of the account (e.g., Savings, Checking)
  account_no    String // Account number (you can add @unique if the account numbers must be unique)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt // Automatically updates when the record is updated
}


model PaymentRequests {
  id            Int      @id @default(autoincrement())
  userid        Int
  transactionno String   @unique
  img_url       String   @db.Text
  status        String
  verified_by   String?
  amount        Float
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

